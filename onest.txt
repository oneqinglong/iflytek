onest系统交流
1. 系统总体介绍
2. 产品功能清单
3. 系统逻辑架构
4. 数据访问流程
5. 对象存储数据类型
6. 业务操作描述
7. 系统进程巡检

onest是一个用于存储和管理海量对象的存储系统
v6.0版本是基于业界主流分布式系统ceph
其设计宗旨是为了给用户提供可扩展/高可靠/高性能的云存储平台
在任何时候从网络的任意地方存储和获取任何大小的数据
onest对象存储系统为用户提供了兼容amazon的【s3类型】
和openstack的【swift类型】的访问接口

☆ 系统设计目标

服务可用性:99.9%
数据可靠性:99.999999%
系统扩展性:容量线性扩展
系统安全性:传输-访问-存储安全

☆ 主要功能

1.用户管理: 认证/配额/访问权限
2.容器管理: 创建/删除/遍历
3.对象管理: 上传/下载/删除
4.访问控制: 设置或获取ACL
5.系统管理: 用户控制/日志/统计/运维等
6.多种访问接口: REST/java/C++/Python/PHP SDK
导入导出工具等

☆ 用户管理

功能描述
1.用户创建
2.用户删除
3.查看用户状态信息
4.设置和修改配额(用户和桶级别)
5.秘钥AK/SK创建/修改/删除
6.子用户创建和删除
7.用户挂起和恢复
8.用户容量统计

☆ 容器管理
其中大部分都支持s3接口和swift接口

功能描述
1.容器创建
2.容器删除
3.遍历容器中的对象
4.按指定prefix或marker遍历容器中的对象
5.设置容器多版本 [swift接口不支持]
6.设置容器的访问列表

☆ 产品功能清单

对象管理

1.上传对象
2.分块上传对象
3.下载对象
4.分块下载对象
5.设置容器多版本/上传/下载/删除/列出对象(没有swift接口)
6.查看对象属性
7.复制对象
8.设置对象公开访问URL
9.删除对象
10.删除多个对象(没有swift接口)
11.设置对象访问列表(没有swift接口)
12.设置对象生命周期(没有s3接口支持)

☆ 系统逻辑架构

==底层存储服务集群
RADOS=reliable/autonomic/distributed object store
即可靠的/自动的/分布式对象存储系统

顾名思义
这一层本身就是一个完整的对象存储系统
所有在系统中的用户数据事实上最终都是由这一层来存储的
而系统的高可靠/高扩展性/高性能/高自动化等特性
本质上也是由这一层所提供的

物理上
RADOS是由大量的存储设备节点组成
每个节点拥有自己的硬件资源
CPU/内存/硬盘/网络
并运行着操作系统和文件系统

==库函数接口
librados
这一层的功能是对RADOS进行抽象和封装
并向上层提供API
以便基于RADOS进行二次应用开发
RADOS是一个对象存储系统
因此librados实现的API也只是针对对象存储功能的

==对象服务―RADOS gateway
RADOS GW是一个提供与amazon s3和swift兼容的RESTful API
的gateway
提供的API的抽象层次更高
但是功能没有librados强大
上层应用可以针对实际需求进行选择

==应用层

不同应用场景下对系统各个应用接口的各种应用方式
例如基于librados直接开发对象存储应用
基于RADOS GW开发的对象存储应用等等

☆ 数据访问流程

1.HTTP Client
2.Frontend
3.operation
4.backend

fontend: 前端,可选apache,nginx或civetweb(默认)
与客户端使用HTTP RESTful接口交互

operation: 操作,处理不同类型的接口比如说s3/swift/admin等

backend:与存储后端交互，读写数据，运行数据管理

RADOS cluster: MON组件负责处理集群管理元数据表
客户端向【OSD】发送读写请求之前
需要从【MON】中拿到最新的集群表
利用【CRUSH】算法计算出来数据存储位置后
直接将读写请求发送到对应的OSD

生产环境中一个存储集群至少部署3个MON节点
以保证MON的高可用

OSD组件负责处理客户端读写请求
不管是通过哪种方式(对象/文件/或者其他通过调用librados接口的API)
访问分布式存储集群
数据最后都转换成对象存储到OSD组件中

用户:对象存储的使用者
一个用户可以拥有零个或者多个容器
一个容器只能被一个用户所拥有

容器: 对象存储系统中存储对象的逻辑空间
同时作为容器内对象总体进行统计和访问控制的入口点
以【容器URI】进行标识
容器由【容器URI】
【容器属性】组成。
包括系统内置属性和访问控制
一个容器包含零个或多个对象。

总结来说
一个用户多个容器
一个容器多个对象

☆ 业务操作描述

==用户操作
用户操作主要由RGW完成
用户元数据信息存储在元数据池(POOL)中
RGW根据用户请求修改元数据并给出响应。
相关的用户操作交互流程如下图所表示:

==Bucket操作
Bucket操作主要由RGW完成
Bucket元数据信息存储在元数据POOL中
RGW根据用户请求修改POOL中的Bucket元数据并给出响应
Bucket删除时
RGW查询Bucket是否为空
如果Bucket非空
则不允许删除Bucket
相关的操作交互流程如下图所示

==对象操作
创建对象时
RGW读取对象实体数据
并根据规则将实体数据切分为【数据块】
并将实体数据块存储到【OSD】
对象传输完成后
RGW将对象实体【数据块元数据】以及【对象元数据】存储到OSD的POOL上。
相关的操作交互流程如下图所示

OSD=Object Storage Device 对象存储设备

对象列表和查询时
RGW从OSD的元数据POOL获取元数据并返回给用户
相关的操作交互流程如下图所示： 

对象读取时
RGW从OSD元数据POOL读取对象以及实体数据的元数据
然后从OSD的数据POOL读取对象实体数据块
并按序返回给用户
相关的操作交互流程如下图所示

对象删除时
RGW首先检查对象是否存在
存在且请求合法时并且文件小于4MB
RGW删除对象并返回删除成功
如果文件大于4MB
则只删除4MB
剩余部分【异步垃圾回收】
相关的操作交互流程如下图所示： 

☆ 系统进程巡检

==1. monitor进程管理

启动MON
sudo systemctl start ceph-mon@{hostname}.service

停止MON
sudo systemctl stop ceph-mon@{hostname}.service

重启MON
sudo systemctl restart ceph-mon@{hostname}.service

